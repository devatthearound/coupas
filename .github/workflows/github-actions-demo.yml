name: Build and Release Electron App

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    permissions:
      contents: write  # 이 권한이 중요합니다!
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
        arch: [x64, arm64]
        exclude:
          - os: windows-latest
            arch: arm64
    
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
      
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Update dependencies
        run: |
          npm audit fix
          npm install
      
      - name: Build Next.js
        run: npm run next:build
      
      - name: Build Electron
        run: npm run electron:build
      
      # macOS 코드 서명 설정 (필요한 경우)
      - name: Import macOS certificates
        if: matrix.os == 'macos-latest' && startsWith(github.ref, 'refs/tags/')
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.APPLE_CERTIFICATE }}
          p12-password: ${{ secrets.CERTIFICATE_PASSWORD }}
          keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}
      
      # 릴리스 생성
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      
      # macOS 빌드
      - name: Build for macOS
        if: matrix.os == 'macos-latest'
        timeout-minutes: 30
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          SKIP_NOTARIZATION: 'true'
          CSC_IDENTITY_AUTO_DISCOVERY: 'false'
          CSC_LINK: ''
          CSC_KEY_PASSWORD: ''
          CSC_NAME: ''
        run: |
          # npm 캐시 정리
          npm cache clean --force
          # 기존 설치 정리
          rm -rf node_modules
          rm -f package-lock.json
          # npm install로 재설치 (Rollup 오류 방지)
          npm install --legacy-peer-deps
          # Rollup optional dependencies 문제 해결
          npm rebuild rollup
          if [ "${{ matrix.arch }}" == "arm64" ]; then
            npx electron-builder --mac --arm64 --publish never --config.mac.identity=null --config.mac.target=zip
          else
            npx electron-builder --mac --x64 --publish never --config.mac.identity=null --config.mac.target=zip
          fi
      
      # Windows 빌드
      - name: Build for Windows
        if: matrix.os == 'windows-latest'
        timeout-minutes: 120
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          # npm 캐시 정리
          npm cache clean --force
          # 기존 설치 정리
          if (Test-Path node_modules) { Remove-Item -Recurse -Force node_modules }
          if (Test-Path package-lock.json) { Remove-Item package-lock.json }
          # npm install로 재설치 (Rollup 오류 방지)
          npm install --legacy-peer-deps
          # Rollup optional dependencies 문제 해결
          npm rebuild rollup
          npx electron-builder --win --${{ matrix.arch }} --publish never
      
      # 빌드 결과물을 릴리스에 업로드
      - name: Upload Release Assets
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            releases/*.dmg
            releases/*.exe
            releases/*.zip
            releases/*.yml
            releases/*.json
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}